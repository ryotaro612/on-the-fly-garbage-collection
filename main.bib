@online{go15gc,
author = {Richard Hudson},
title = {Go GC: Prioritizing low latency and simplicity},
url = {https://go.dev/blog/go15gc},
year = {2015}
}
@article{on-the-fly,
author = {Dijkstra, Edsger W. and Lamport, Leslie and Martin, A. J. and Scholten, C. S. and Steffens, E. F. M.},
title = {On-the-fly garbage collection: an exercise in cooperation},
year = {1978},
issue_date = {Nov. 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/359642.359655},
doi = {10.1145/359642.359655},
abstract = {As an example of cooperation between sequential processes with very little mutual interference despite frequent manipulations of a large shared data space, a technique is developed which allows nearly all of the activity needed for garbage detection and collection to be performed by an additional processor operating concurrently with the processor devoted to the computation proper. Exclusion and synchronization constraints have been kept as weak as could be achieved; the severe complexities engendered by doing so are illustrated.},
journal = {Commun. ACM},
month = nov,
pages = {966â€“975},
numpages = {10},
keywords = {cooperation bet. sequential processes w/ minimized mutual ex, fine-grained interleaving, garbage collection, multiprocessing, program correctness for multiprogramming tasks}
}
@online{ismmkeynote,
author = {Richard Hudson},
title = {Getting to Go: The Journey of Go's Garbage Collector},
url = {https://go.dev/blog/ismmkeynote},
year = {2018}
}
@article{zgc,
author = {Yang, Albert Mingkun and Wrigstad, Tobias},
title = {Deep Dive into ZGC: A Modern Garbage Collector in OpenJDK},
year = {2022},
issue_date = {December 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {4},
issn = {0164-0925},
url = {https://doi.org/10.1145/3538532},
doi = {10.1145/3538532},
abstract = {ZGC is a modern, non-generational, region-based, mostly concurrent, parallel, mark-evacuate collector recently added to OpenJDK. It aims at having GC pauses that do not grow as the heap size increases, offering low latency even with large heap sizes. The ZGC C++ source code is readily accessible in the OpenJDK repository, but reading it (25 KLOC) can be very intimidating, and one might easily get lost in low-level implementation details, obscuring the key concepts. To make the ZGC algorithm more approachable, this work provides a thorough description on a high-level, focusing on the overall design with moderate implementation details. To explain the concurrency aspects, we provide a SPIN model that allows studying races between mutators and GC threads, and how they are resolved in ZGC. Such a model is not only useful for learning the current design (offering a deterministic and interactive experience) but also beneficial for prototyping new ideas and extensions. Our hope is that our detailed description and the SPIN model will enable the use of ZGC as a building block for future GC research, and research ideas implemented on top of it could even be adopted in the industry more readily, bridging the gap between academia and industry in the context of GC research.},
journal = {ACM Trans. Program. Lang. Syst.},
month = sep,
articleno = {22},
numpages = {34},
keywords = {model checking, SPIN, ZGC, Garbage collection}
}